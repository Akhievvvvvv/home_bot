# bot/main.py
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from bot.config.settings import BOT_TOKEN, ADMIN_IDS, PLAN_1_MONTH, PLAN_2_MONTH, PLAN_3_MONTH, VPN_CLIENTS_DIR
from bot.locales.ru import START_MESSAGE, MAIN_MENU, PAYMENT_MESSAGES, BUTTONS, CONFIG_MESSAGES
from bot.utils.vpn import generate_ovpn

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# -------------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é --------------------
def main_menu_kb():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(MAIN_MENU["buy_vpn"], callback_data="buy_vpn"),
        InlineKeyboardButton(MAIN_MENU["my_profile"], callback_data="my_profile"),
        InlineKeyboardButton(MAIN_MENU["my_config"], callback_data="my_config"),
        InlineKeyboardButton(MAIN_MENU["referral"], callback_data="referral"),
        InlineKeyboardButton(MAIN_MENU["help"], callback_data="help"),
        InlineKeyboardButton(MAIN_MENU["support"], callback_data="support")
    )
    return kb

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer(START_MESSAGE.format(username=message.from_user.username), reply_markup=main_menu_kb())

# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ --------------------
@dp.callback_query_handler(lambda c: c.data == "buy_vpn")
async def buy_vpn_handler(call: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(f"1 –º–µ—Å—è—Ü ‚Äî {PLAN_1_MONTH} ‚≠ê", callback_data="buy_1"),
        InlineKeyboardButton(f"2 –º–µ—Å—è—Ü–∞ ‚Äî {PLAN_2_MONTH} ‚≠ê", callback_data="buy_2"),
        InlineKeyboardButton(f"3 –º–µ—Å—è—Ü–∞ ‚Äî {PLAN_3_MONTH} ‚≠ê", callback_data="buy_3"),
    )
    await call.message.answer(PAYMENT_MESSAGES["choose_tariff"], reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("buy_"))
async def handle_payment(call: types.CallbackQuery):
    month_map = {"buy_1": PLAN_1_MONTH, "buy_2": PLAN_2_MONTH, "buy_3": PLAN_3_MONTH}
    month = call.data.split("_")[1]
    stars = month_map[call.data]
    
    # –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∏–ª(–∞)"
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton(BUTTONS["paid"], callback_data=f"paid_{month}"))
    
    await call.message.answer(
        f"‚≠ê –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–∞ {month} –º–µ—Å—è—Ü(-–µ–≤) –∑–∞ {stars} ‚≠ê\n\n"
        f"{PAYMENT_MESSAGES['payment_instructions']}",
        reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data.startswith("paid_"))
async def paid_handler(call: types.CallbackQuery):
    month = call.data.split("_")[1]
    user_id = call.from_user.id
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VPN .ovpn
    ovpn_file = generate_ovpn(str(user_id))
    
    await call.message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–í–∞—à VPN –≥–æ—Ç–æ–≤.\n\n"
        f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ovpn_file}\n\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:\n"
        f"1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenVPN –∫–ª–∏–µ–Ω—Ç.\n"
        f"2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ .ovpn —Ñ–∞–π–ª.\n"
        f"3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN.\n"
        f"üåê –¢–µ–ø–µ—Ä—å –≤—ã –æ–Ω–ª–∞–π–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ!"
    )

# -------------------- –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å --------------------
@dp.callback_query_handler(lambda c: c.data == "my_profile")
async def profile_handler(call: types.CallbackQuery):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await call.message.answer(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: 1 –º–µ—Å—è—Ü\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: 01.10.2025\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã: 5\n"
        f"–û–ø–ª–∞—á–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: 2\n"
    )

# -------------------- –ú–æ—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
@dp.callback_query_handler(lambda c: c.data == "my_config")
async def config_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ovpn_file = generate_ovpn(str(user_id))
    await call.message.answer(
        CONFIG_MESSAGES["vpn_info"].format(
            ipv4="5.129.197.99",
            ipv6="2a03:6f00:a::cbe1",
            root_password="hP9CsxoHLUnq,3"
        ) + f"\n–§–∞–π–ª .ovpn: {ovpn_file}"
    )

# -------------------- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ --------------------
@dp.callback_query_handler(lambda c: c.data == "referral")
async def referral_handler(call: types.CallbackQuery):
    referral_link = f"https://t.me/home_vpn_bot_bot?start={call.from_user.id}"
    await call.message.answer(
        f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ {REFERRAL_BONUS_PERCENT}% –æ—Ç –∏—Ö –æ–ø–ª–∞—Ç—ã ‚≠ê.\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞: {REFERRAL_MIN_PAYOUT} ‚≠ê\n"
        f"–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n{referral_link}"
    )

# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
