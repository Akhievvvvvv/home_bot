# bot/main.py
import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart

from bot.config.settings import (
    BOT_TOKEN,
    PLAN_1_MONTH, PLAN_2_MONTH, PLAN_3_MONTH,
    REFERRAL_BONUS_PERCENT, REFERRAL_MIN_PAYOUT,
)
from bot.locales.ru import START_MESSAGE, MAIN_MENU, PAYMENT_MESSAGES, BUTTONS
from bot.utils.vpn import generate_ovpn
from bot.handlers import payments, admin

# -------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# -------------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é --------------------
def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=MAIN_MENU["buy_vpn"], callback_data="buy_vpn")],
        [InlineKeyboardButton(text=MAIN_MENU["my_profile"], callback_data="my_profile")],
        [InlineKeyboardButton(text=MAIN_MENU["my_config"], callback_data="my_config")],
        [InlineKeyboardButton(text=MAIN_MENU["referral"], callback_data="referral")],
        [InlineKeyboardButton(text=MAIN_MENU["help"], callback_data="help")],
        [InlineKeyboardButton(text=MAIN_MENU["support"], callback_data="support")],
    ])

# -------------------- /start --------------------
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        START_MESSAGE.format(username=message.from_user.username or message.from_user.id),
        reply_markup=main_menu_kb()
    )

# -------------------- –û—Å–Ω–æ–≤–Ω—ã–µ callback –∫–Ω–æ–ø–∫–∏ --------------------
async def buy_vpn_handler(call: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"1 –º–µ—Å—è—Ü ‚Äî {PLAN_1_MONTH} ‚≠ê", callback_data="buy_1")],
        [InlineKeyboardButton(text=f"2 –º–µ—Å—è—Ü–∞ ‚Äî {PLAN_2_MONTH} ‚≠ê", callback_data="buy_2")],
        [InlineKeyboardButton(text=f"3 –º–µ—Å—è—Ü–∞ ‚Äî {PLAN_3_MONTH} ‚≠ê", callback_data="buy_3")],
    ])
    await call.message.answer(PAYMENT_MESSAGES["choose_tariff"], reply_markup=kb)
    await call.answer()


async def profile_handler(call: types.CallbackQuery):
    await call.message.answer(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.username or call.from_user.id}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: 1 –º–µ—Å—è—Ü\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: 01.10.2025\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã: 5\n"
        f"–û–ø–ª–∞—á–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: 2\n"
    )
    await call.answer()


async def config_handler(call: types.CallbackQuery):
    try:
        ovpn_file = generate_ovpn(str(call.from_user.id))
        with open(ovpn_file, "rb") as file:
            await call.message.answer_document(file, caption="üìé –í–∞—à–∞ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    await call.answer()


async def referral_handler(call: types.CallbackQuery):
    bot_info = await bot.me()
    referral_link = f"https://t.me/{bot_info.username}?start={call.from_user.id}"
    await call.message.answer(
        f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ {REFERRAL_BONUS_PERCENT}% –æ—Ç –∏—Ö –æ–ø–ª–∞—Ç—ã ‚≠ê.\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞: {REFERRAL_MIN_PAYOUT} ‚≠ê\n\n"
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{referral_link}"
    )
    await call.answer()


async def help_handler(call: types.CallbackQuery):
    await call.message.answer("‚ÑπÔ∏è –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ FAQ.")
    await call.answer()


async def support_handler(call: types.CallbackQuery):
    await call.message.answer("üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @YourSupportUsername")
    await call.answer()

# -------------------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback --------------------
def register_callbacks(dp: Dispatcher):
    dp.callback_query.register(buy_vpn_handler, F.data == "buy_vpn")
    dp.callback_query.register(profile_handler, F.data == "my_profile")
    dp.callback_query.register(config_handler, F.data == "my_config")
    dp.callback_query.register(referral_handler, F.data == "referral")
    dp.callback_query.register(help_handler, F.data == "help")
    dp.callback_query.register(support_handler, F.data == "support")

# -------------------- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ --------------------
def register_all_handlers():
    register_callbacks(dp)
    dp.include_router(payments.router)
    dp.include_router(admin.admin_router)

# -------------------- –ó–∞–ø—É—Å–∫ --------------------
async def main():
    register_all_handlers()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
