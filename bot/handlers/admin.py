from aiogram import types, Dispatcher
from bot.config.settings import ADMIN_IDS
from bot.models.database import SessionLocal, User, Subscription, VPNKey

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(admin_panel, commands=["admin"])
    dp.register_message_handler(list_users, commands=["users"])
    dp.register_message_handler(list_subscriptions, commands=["subs"])
    dp.register_message_handler(list_keys, commands=["keys"])
    dp.register_message_handler(broadcast_start, commands=["broadcast"])
    dp.register_message_handler(broadcast_send, state="broadcast:message")


async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    text = (
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Home Bot</b>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/subs - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "/keys - VPN –∫–ª—é—á–∏\n"
        "/broadcast - –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n"
    )
    await message.answer(text, parse_mode="HTML")


async def list_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    db = SessionLocal()
    users = db.query(User).all()
    db.close()

    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    for u in users:
        text += f"ID: {u.id} | Username: @{u.username} | Stars: {u.stars}\n"
    await message.answer(text, parse_mode="HTML")


async def list_subscriptions(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    db = SessionLocal()
    subs = db.query(Subscription).all()
    db.close()

    if not subs:
        await message.answer("–ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n"
    for s in subs:
        text += f"User ID: {s.user_id} | –¢–∞—Ä–∏—Ñ: {s.plan_months} –º–µ—Å | –°—Ç–∞—Ç—É—Å: {s.status}\n"
    await message.answer(text, parse_mode="HTML")


async def list_keys(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    db = SessionLocal()
    keys = db.query(VPNKey).all()
    db.close()

    if not keys:
        await message.answer("VPN –∫–ª—é—á–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "<b>–°–ø–∏—Å–æ–∫ VPN –∫–ª—é—á–µ–π:</b>\n"
    for k in keys:
        text += f"–ö–ª—é—á: {k.key} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {k.user_id} | –ê–∫—Ç–∏–≤–µ–Ω: {k.active}\n"
    await message.answer(text, parse_mode="HTML")


# –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot

class BroadcastStates(StatesGroup):
    message = State()

async def broadcast_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await BroadcastStates.message.set()

async def broadcast_send(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    db = SessionLocal()
    users = db.query(User).all()
    db.close()

    sent = 0
    for u in users:
        try:
            await message.bot.send_message(u.id, message.text)
            sent += 1
        except:
            continue

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}/{len(users)}")
    await state.finish()
