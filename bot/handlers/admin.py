from aiogram import Router, F, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from bot.config.settings import ADMIN_IDS
from bot.models.database import SessionLocal, User, Subscription, VPNKey

admin_router = Router()

# --- FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
class BroadcastStates(StatesGroup):
    message = State()

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@admin_router.message(F.text == "/admin")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    text = (
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/subs - –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/keys - VPN –∫–ª—é—á–∏\n"
        "/broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞\n"
    )
    await message.answer(text, parse_mode="HTML")

@admin_router.message(F.text == "/users")
async def list_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    with SessionLocal() as db:
        users = db.query(User).all()
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    for u in users:
        username = f"@{u.username}" if u.username else "‚Äî"
        text += f"ID: {u.id} | Telegram ID: {u.telegram_id} | Username: {username}\n"
    await message.answer(text[:4096], parse_mode="HTML")

@admin_router.message(F.text == "/subs")
async def list_subscriptions(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    with SessionLocal() as db:
        subs = db.query(Subscription).all()
    if not subs:
        await message.answer("–ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n"
    for s in subs:
        text += f"User ID: {s.user_id} | –¢–∞—Ä–∏—Ñ: {s.plan_months} –º–µ—Å | –û–ø–ª–∞—á–µ–Ω–æ: {s.paid_stars} ‚≠ê | –î–æ: {s.end_date}\n"
    await message.answer(text[:4096], parse_mode="HTML")

@admin_router.message(F.text == "/keys")
async def list_keys(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    with SessionLocal() as db:
        keys = db.query(VPNKey).all()
    if not keys:
        await message.answer("VPN –∫–ª—é—á–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    text = "<b>–°–ø–∏—Å–æ–∫ VPN –∫–ª—é—á–µ–π:</b>\n"
    for k in keys:
        text += f"–ö–ª—é—á: {k.key} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {k.user_id} | –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {k.expires_at}\n"
    await message.answer(text[:4096], parse_mode="HTML")

# --- –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ---
@admin_router.message(F.text == "/broadcast")
async def broadcast_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await state.set_state(BroadcastStates.message)

@admin_router.message(BroadcastStates.message)
async def broadcast_send(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    with SessionLocal() as db:
        users = db.query(User).all()
    sent = 0
    for u in users:
        try:
            await message.bot.send_message(u.telegram_id, message.text)
            sent += 1
        except Exception:
            continue
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}/{len(users)}")
    await state.clear()
